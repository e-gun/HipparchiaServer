[A] latattemptelision() could use more love

MorphPossibilityObject.getlatinbaseform() needs work per-misceo
MorphPossibilityObject.getlatinbaseform() needs work permixtā, per-misceo
MorphPossibilityObject.getlatinbaseform() needs work praevortēmur, prae-verto
MorphPossibilityObject.getlatinbaseform() needs work dissīderent, dis-sido

[B] similarly
MorphPossibilityObject.getbaseform() is confused ἐνέρριπτεν, ἐν, ἐν-ῥίπτω ['ἐνέρριπτεν', 'ἐν', 'ἐν-ῥίπτω']
MorphPossibilityObject.getbaseform() is confused ἐνέρριψεν, ἐν, ἐν-ῥίπτω ['ἐνέρριψεν', 'ἐν', 'ἐν-ῥίπτω']
MorphPossibilityObject.getbaseform() is confused ἐνέρριψαν, ἐν, ἐν-ῥίπτω ['ἐνέρριψαν', 'ἐν', 'ἐν-ῥίπτω']
MorphPossibilityObject.getbaseform() is confused ἐνέρριψε, ἐν, ἐν-ῥίπτω ['ἐνέρριψε', 'ἐν', 'ἐν-ῥίπτω']

[C] resetsession

resetsession will reload '/' without clearing date range from html (but the range has been reset)
a second click will clear the display
js async timing issue, it seems
irritating to avoid "return redirect(url_for('frontpage'))" which is so simple and easy to call


[D] platform specific bug: FreeBSD %complete poll info not working with proximity search


[E] platform specific bug? Ryzen vs FreeBSD vs threads (vs C-states?)
    [YES: C-States; Fixed with BIOS update to powersave options]

    workonsimplesearch() (and its kin)

    a very odd bug in here on a Ryzen 1600x running FreeBSD 11.1/12ALPHA and Ubuntu 10: you can search for "mentior" 10x and
    somewhere in those trials the search will fail: one of the threads will get stuck in this function
    this cannot be reproduced on macOS 10.13.2 with identical versions of python and postgres installed...
    this bug is not in Hipparchia? presumably it also does not affect just this function

    you will not trigger the bug with the following number of workers set in config.py
        1
        2
        3
        4
    at 5 and 6 you get fails: often right away
    but then you can do more searches that will work for a while
    then you will fail
    then you can do more searches on top of this
    this will leave you with two zombie threads and two eternally updating polls


[F] In progress: launches, but will not serve [NOT A PRIORITY FEATURE]

./bin/pip3 install pyopenssl

>>> from werkzeug.serving import make_ssl_devcert
>>> make_ssl_devcert('./HipparchiaServer/server/settings/hipparchia_openssl_key', host='localhost')
('./HipparchiaServer/server/settings/hipparchia_openssl_key.crt', './HipparchiaServer/server/settings/hipparchia_openssl_key.key')

run.py:

	from sys import argv
	from os import path
	basepath = path.dirname(argv[0])
	print('basepath', basepath)
	crt = '/server/settings/hipparchia_openssl_key.crt'
	key = '/server/settings/hipparchia_openssl_key.key'

	hipparchia.run(threaded=True, debug=False, host=hipparchia.config['LISTENINGADDRESS'], port=hipparchia.config['FLASKSERVEDFROMPORT'],
	               ssl_context=(basepath + crt, basepath + key))



[G] [not actually a case where we need debugging ATM] REDIS debug notes:

[build a connection by hand]

    import redis
    sock='/tmp/redis.sock'
    dbid=0
    poolsize=4
    port = 6379
    redisconnection = redis.ConnectionPool(host='localhost', port=port, db=dbid, max_connections=poolsize)
    # redisconnection = redis.ConnectionPool(connection_class=redis.UnixDomainSocketConnection, path=sock, db=dbid, max_connections=poolsize)
    c = redis.Redis(connection_pool=redisconnection)

ex queries:

    c.keys()
    len([k for k in c.keys() if b'_searchlist' in k])
    c.delete(b'dab1038f_searchlist')

    r = [k for k in c.keys() if b'remain' in k]
    a = [c.delete(key) for key in r]


[H] can't get morphology table for: ἀπαλλάϲϲω

    ...
    d/m/v attic subj 2nd
    d/m/v attic opt 2nd
    d/m/v attic imperat 2nd
    AssertionError: invalid voice submitted to findmygreektenses(): 2nd

hipparchiaDB=#     select * from greek_morphology where possible_dictionary_forms like '%ἀπαλλάϲϲω%' and possible_dictionary_forms like '%2nd%' and possible_dictionary_forms like '%imperat%' and possible_dictionary_forms like '%attic%';

you will see:

 ἀπαλλάχθητον  | 11723310 |            | <possibility_1>ἀπαλλάχθητον, ἀπαλλάϲϲω<xref_value>11723310</xref_value><xref_kind>9</xref_kind><transl>set free</transl><analysis>aor ind pass 2nd dual (doric aeolic)</analysis></possibility_1>           +
               |          |            | <possibility_2>ἀπαλλάϲϲω<xref_value>11723310</xref_value><xref_kind>9</xref_kind><transl>set free</transl><analysis>aor imperat 2nd dual</analysis></possibility_2>                                         +
               |          |            | <possibility_3>ἀπαλλάχθητον, ἀπαλλάϲϲω<xref_value>11723310</xref_value><xref_kind>9</xref_kind><transl>set free</transl><analysis>aor ind pass 2nd dual (doric aeolic)</analysis></possibility_3>           +
               |          |            | <possibility_4>ἀπαλλάϲϲω<xref_value>11723310</xref_value><xref_kind>9</xref_kind><transl>set free</transl><analysis>aor imperat 2nd dual</analysis></possibility_4>                                         +
               |          |            | <possibility_5>ἀπαλλάϲϲω<xref_value>11723310</xref_value><xref_kind>9</xref_kind><transl>set free</transl><analysis>aor ind pass 2nd dual (homeric ionic)</analysis></possibility_5>                        +
               |          |            | <possibility_6>ἀπαλλάϲϲω<xref_value>11723310</xref_value><xref_kind>9</xref_kind><transl>set free</transl><analysis>aor ind pass 2nd dual (homeric ionic)</analysis></possibility_6>                        +

there is no voice for

    <possibility_4>ἀπαλλάϲϲω<xref_value>11723310</xref_value><xref_kind>9</xref_kind><transl>set free</transl><analysis>aor imperat 2nd dual</analysis></possibility_4>

[I] BREAKAGE WARNING

# bug report filed to https://github.com/matplotlib/matplotlib/issues/16739
# a length check fails (_axes.py @ 4386): new to 3.2.0; not present in 3.1.3 #16739

vector graphing breaks if you go to matplotlib 3.2.0
  File "/Users/erik/hipparchia_venv/HipparchiaServer/server/semanticvectors/vectorgraphing.py", line 96, in graphnnmatches
    imagename = graphmatches(title, searchterm, searchobject, mostsimilartuples, terms, relevantconnections, vtype='nn')
  File "/Users/erik/hipparchia_venv/HipparchiaServer/server/semanticvectors/vectorgraphing.py", line 104, in graphmatches
    return fnc(graphtitle, searchterm, searchobject, mostsimilartuples, terms, relevantconnections, vtype)
  File "/Users/erik/hipparchia_venv/HipparchiaServer/server/semanticvectors/vectorgraphing.py", line 162, in matplotgraphmatches
    nx.draw_networkx_nodes(graph, pos, node_size=scalednodes, alpha=0.75, node_color=range(len(terms)), cmap='Pastel1')
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py", line 417, in draw_networkx_nodes
    label=label)
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/matplotlib/__init__.py", line 1543, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/matplotlib/cbook/deprecation.py", line 358, in wrapper
    return func(*args, **kwargs)
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/matplotlib/axes/_axes.py", line 4387, in scatter
    raise ValueError("s must be a scalar, or the same size as x and y")

the "fix" is a downgrade:
    ~/hipparchia_venv/bin/pip install matplotlib==3.1.3

check:
    https://matplotlib.org/3.2.0/api/api_changes.html

https://github.com/matplotlib/matplotlib/issues/16739

from random import uniform as rnd
import matplotlib.pyplot as plt
ax = plt.gca()

a = [-0.10902419, -0.75646717, -0.96403103, -0.1960284,  -0.05789045,  0.16462492, 0.25156931, 0.56237587, 0.69960643, 0.31271061, -0.62216608, 0.47206789, 0.60326695, -0.08107401, -0.45185505, 0.17231438]
b = [-0.07969323, -0.32750072, -0.09406059, 0.27041506, -1., 0.18910032, 0.62951915, 0.09861711, -0.06275149, 0.22269021, -0.86167041, -0.23924364, 0.42907668, 0.58223968, 0.54558958, -0.30232771]
c = [9323.340654373169, 6616.982460021973, 5690.618991851807, 5689.395904541016, 5672.798752784729, 5638.451099395752, 5606.265664100647, 5553.000926971436, 5544.699668884277, 5531.859755516052, 5476.373791694641, 5463.115096092224, 5454.218745231628, 5441.088080406189, 5435.509443283081]

>>> ax.scatter(a, b, c)
<matplotlib.collections.PathCollection object at 0x116fe1ef0>

d = [rnd(-1,1) for _ in range(16)]
e = [rnd(-1,1) for _ in range(16)]
f = [rnd(3000, 4000) for _ in range(15)]

ax.scatter(d, e, f)


can 'fix' matplotlib 3.2.0 as follows @ _axes.py ln 4378:

        if len(s) not in (1, x.size):
            # raise ValueError("s must be a scalar, or the same size as x and y")
            print('not raising ValueError...')
