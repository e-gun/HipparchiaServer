[A] latattemptelision() could use more love

MorphPossibilityObject.getlatinbaseform() needs work per-misceo
MorphPossibilityObject.getlatinbaseform() needs work permixtā, per-misceo
MorphPossibilityObject.getlatinbaseform() needs work praevortēmur, prae-verto
MorphPossibilityObject.getlatinbaseform() needs work dissīderent, dis-sido

[B] similarly
MorphPossibilityObject.getbaseform() is confused ἐνέρριπτεν, ἐν, ἐν-ῥίπτω ['ἐνέρριπτεν', 'ἐν', 'ἐν-ῥίπτω']
MorphPossibilityObject.getbaseform() is confused ἐνέρριψεν, ἐν, ἐν-ῥίπτω ['ἐνέρριψεν', 'ἐν', 'ἐν-ῥίπτω']
MorphPossibilityObject.getbaseform() is confused ἐνέρριψαν, ἐν, ἐν-ῥίπτω ['ἐνέρριψαν', 'ἐν', 'ἐν-ῥίπτω']
MorphPossibilityObject.getbaseform() is confused ἐνέρριψε, ἐν, ἐν-ῥίπτω ['ἐνέρριψε', 'ἐν', 'ἐν-ῥίπτω']

[C] resetsession

resetsession will reload '/' without clearing date range from html (but the range has been reset)
a second click will clear the display
js async timing issue, it seems
irritating to avoid "return redirect(url_for('frontpage'))" which is so simple and easy to call


[D] platform specific bug: FreeBSD %complete poll info not working with proximity search


[E] platform specific bug? Ryzen vs FreeBSD vs threads (vs C-states?)
    [YES: C-States; Fixed with BIOS update to powersave options]

    workonsimplesearch() (and its kin)

    a very odd bug in here on a Ryzen 1600x running FreeBSD 11.1/12ALPHA and Ubuntu 10: you can search for "mentior" 10x and
    somewhere in those trials the search will fail: one of the threads will get stuck in this function
    this cannot be reproduced on macOS 10.13.2 with identical versions of python and postgres installed...
    this bug is not in Hipparchia? presumably it also does not affect just this function

    you will not trigger the bug with the following number of workers set in config.py
        1
        2
        3
        4
    at 5 and 6 you get fails: often right away
    but then you can do more searches that will work for a while
    then you will fail
    then you can do more searches on top of this
    this will leave you with two zombie threads and two eternally updating polls


[F] In progress: launches, but will not serve [NOT A PRIORITY FEATURE]

./bin/pip3 install pyopenssl

>>> from werkzeug.serving import make_ssl_devcert
>>> make_ssl_devcert('./HipparchiaServer/server/settings/hipparchia_openssl_key', host='localhost')
('./HipparchiaServer/server/settings/hipparchia_openssl_key.crt', './HipparchiaServer/server/settings/hipparchia_openssl_key.key')

run.py:

	from sys import argv
	from os import path
	basepath = path.dirname(argv[0])
	print('basepath', basepath)
	crt = '/server/settings/hipparchia_openssl_key.crt'
	key = '/server/settings/hipparchia_openssl_key.key'

	hipparchia.run(threaded=True, debug=False, host=hipparchia.config['LISTENINGADDRESS'], port=hipparchia.config['FLASKSERVEDFROMPORT'],
	               ssl_context=(basepath + crt, basepath + key))

[I] BREAKAGE WARNING [FIXED?]

# see https://github.com/matplotlib/matplotlib/issues/16739
# @tacaswell had the solutIon: just pad the array...


# bug report filed to https://github.com/matplotlib/matplotlib/issues/16739
# a length check fails (_axes.py @ 4386): new to 3.2.0; not present in 3.1.3 #16739

vector graphing breaks if you go to matplotlib 3.2.0
  File "/Users/erik/hipparchia_venv/HipparchiaServer/server/semanticvectors/vectorgraphing.py", line 96, in graphnnmatches
    imagename = graphmatches(title, searchterm, searchobject, mostsimilartuples, terms, relevantconnections, vtype='nn')
  File "/Users/erik/hipparchia_venv/HipparchiaServer/server/semanticvectors/vectorgraphing.py", line 104, in graphmatches
    return fnc(graphtitle, searchterm, searchobject, mostsimilartuples, terms, relevantconnections, vtype)
  File "/Users/erik/hipparchia_venv/HipparchiaServer/server/semanticvectors/vectorgraphing.py", line 162, in matplotgraphmatches
    nx.draw_networkx_nodes(graph, pos, node_size=scalednodes, alpha=0.75, node_color=range(len(terms)), cmap='Pastel1')
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py", line 417, in draw_networkx_nodes
    label=label)
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/matplotlib/__init__.py", line 1543, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/matplotlib/cbook/deprecation.py", line 358, in wrapper
    return func(*args, **kwargs)
  File "/Users/erik/hipparchia_venv/lib/python3.7/site-packages/matplotlib/axes/_axes.py", line 4387, in scatter
    raise ValueError("s must be a scalar, or the same size as x and y")

the "fix" is a downgrade:
    ~/hipparchia_venv/bin/pip install matplotlib==3.1.3

check:
    https://matplotlib.org/3.2.0/api/api_changes.html

https://github.com/matplotlib/matplotlib/issues/16739

from random import uniform as rnd
import matplotlib.pyplot as plt
ax = plt.gca()

a = [-0.10902419, -0.75646717, -0.96403103, -0.1960284,  -0.05789045,  0.16462492, 0.25156931, 0.56237587, 0.69960643, 0.31271061, -0.62216608, 0.47206789, 0.60326695, -0.08107401, -0.45185505, 0.17231438]
b = [-0.07969323, -0.32750072, -0.09406059, 0.27041506, -1., 0.18910032, 0.62951915, 0.09861711, -0.06275149, 0.22269021, -0.86167041, -0.23924364, 0.42907668, 0.58223968, 0.54558958, -0.30232771]
c = [9323.340654373169, 6616.982460021973, 5690.618991851807, 5689.395904541016, 5672.798752784729, 5638.451099395752, 5606.265664100647, 5553.000926971436, 5544.699668884277, 5531.859755516052, 5476.373791694641, 5463.115096092224, 5454.218745231628, 5441.088080406189, 5435.509443283081]

>>> ax.scatter(a, b, c)
<matplotlib.collections.PathCollection object at 0x116fe1ef0>

d = [rnd(-1,1) for _ in range(16)]
e = [rnd(-1,1) for _ in range(16)]
f = [rnd(3000, 4000) for _ in range(15)]

ax.scatter(d, e, f)


can 'fix' matplotlib 3.2.0 as follows @ _axes.py ln 4378:

        if len(s) not in (1, x.size):
            # raise ValueError("s must be a scalar, or the same size as x and y")
            print('not raising ValueError...')

[J] "/parse/iudico"

This works on port 5000
This does not work if you go via gunicorn

But seemingly all other words do work !!

put "print('ow',observedword)" as the first line of findbyform() and you will not see 'iudico' but you will see 'esse', etc
so we never actually make it to the route... [@hipparchia.route('/parse/<observedword>')]
this is not too surprising since the 'hit' is not logged


'iudicor' and 'iudicas' work fine


[K] subqueryphrasesearch + indexrestrictions = SQL  [FIXED]

[note that 1.6.11, etc do not have ths problem: this is a precomposed search issue]

τῷ φίλῳ μου will search properly over unlimited time; but if you cut the time you end up with TT rules for both query and data

!!! Index failure on q/d:
	q =
    SELECT second.wkuniversalid, second.index, second.level_05_value, second.level_04_value, second.level_03_value, second.level_02_value, second.level_01_value, second.level_00_value, second.marked_up_line, second.accented_line, second.stripped_line, second.hyphenated_words, second.annotations FROM
        ( SELECT * FROM
            ( SELECT wkuniversalid, index, level_05_value, level_04_value, level_03_value, level_02_value, level_01_value, level_00_value, marked_up_line, accented_line, stripped_line, hyphenated_words, annotations, concat(accented_line, ' ', lead(accented_line) OVER (ORDER BY index ASC) ) AS linebundle
                FROM dp6501 WHERE
            EXISTS
                (SELECT 1 FROM dp6501_includelist_18d442b4e864480395647bfabca00ed0 incl WHERE incl.includeindex = dp6501.index
             AND dp6501.accented_line ~* %s) ) first
        ) second
    WHERE second.linebundle ~ %s  LIMIT 200 !!!
>>> 	d = :
    SELECT second.wkuniversalid, second.index, second.level_05_value, second.level_04_value, second.level_03_value, second.level_02_value, second.level_01_value, second.level_00_value, second.marked_up_line, second.accented_line, second.stripped_line, second.hyphenated_words, second.annotations FROM
        ( SELECT * FROM
            ( SELECT wkuniversalid, index, level_05_value, level_04_value, level_03_value, level_02_value, level_01_value, level_00_value, marked_up_line, accented_line, stripped_line, hyphenated_words, annotations, concat(accented_line, ' ', lead(accented_line) OVER (ORDER BY index ASC) ) AS linebundle
                FROM dp6501 WHERE
            EXISTS
                (SELECT 1 FROM dp6501_includelist_18d442b4e864480395647bfabca00ed0 incl WHERE incl.includeindex = dp6501.index
             AND dp6501.accented_line ~* %s) ) first
        ) second
    WHERE second.linebundle ~ %s  LIMIT 200



[i] after the call to configurewhereclausedata() by updatesearchlistandsearchobject() we will have, for example,


'in151e': {'type': 'temptable', 'where': {'tempquery': '\n\tCREATE TEMPORARY TABLE in151e_includelist AS \n\t\tSELECT values \n\t\t\tAS includeindex FROM unnest(ARRAY[48392,48393,48394,48395,48396,48397,48398,48399,48400,48401,48402,48403,48404,48405,48406,48407,48408,48409,48410,48411,48412,48413,48414,48415,48416,48417,48418,48419,48420,48421,48422,48423,48424,48425,48426,48427,48428,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,48442,48443,48444,48445,48446]) values\n\t'}},
and
'in0f2e': {'type': 'temptable', 'where': {'tempquery': '\n\tCREATE TEMPORARY TABLE in0f2e_includelist AS \n\t\tSELECT values \n\t\t\tAS includeindex FROM unnest(ARRAY[7248]) values\n\t'}},

[ii] soon we got to precomposedsqlsearch() and that sends us to precomposedsqlsubqueryphrasesearch()

there we call searchlistintosqldict()

then we get to the real culprit: rewritequerystringforsubqueryphrasesearching() inside of precompsesql.py

the example in the description of the function is a major author "between"; we need to also handle inscriptions and unnest(ARRAY[])

n books of homer looks like:

    configurewhereclausedata() indexedauthorlist {'gr0012': {'type': 'between', 'where': {'listofboundaries': [(1491, 1952), (16153, 16587), (1, 612)], 'listofomissions': []}}}

    >>> rewritequerystringforsubqueryphrasesearching() sent WHERE ( (index BETWEEN 1491 AND 1952) OR (index BETWEEN 1 AND 612) )
    >>> rewritequerystringforsubqueryphrasesearching() returned
        SELECT second.wkuniversalid, second.index, second.level_05_value, second.level_04_value, second.level_03_value, second.level_02_value, second.level_01_value, second.level_00_value, second.marked_up_line, second.accented_line, second.stripped_line, second.hyphenated_words, second.annotations FROM
            ( SELECT * FROM
                ( SELECT wkuniversalid, index, level_05_value, level_04_value, level_03_value, level_02_value, level_01_value, level_00_value, marked_up_line, accented_line, stripped_line, hyphenated_words, annotations, concat(accented_line, ' ', lead(accented_line) OVER (ORDER BY index ASC) ) AS linebundle
                    FROM gr0012 WHERE ( (index BETWEEN 1491 AND 1952) OR (index BETWEEN 1 AND 612) ) ) first
            ) second
        WHERE second.linebundle ~ %s  LIMIT 200

an inscription looks like

>>> rewritequerystringforsubqueryphrasesearching() sent WHERE
            EXISTS
                (SELECT 1 FROM in0c1e_includelist_UNIQUENAME incl WHERE incl.includeindex = in0c1e.index
             AND in0c1e.accented_line ~* %s)


>>> rewritequerystringforsubqueryphrasesearching() returned
    SELECT second.wkuniversalid, second.index, second.level_05_value, second.level_04_value, second.level_03_value, second.level_02_value, second.level_01_value, second.level_00_value, second.marked_up_line, second.accented_line, second.stripped_line, second.hyphenated_words, second.annotations FROM
        ( SELECT * FROM
            ( SELECT wkuniversalid, index, level_05_value, level_04_value, level_03_value, level_02_value, level_01_value, level_00_value, marked_up_line, accented_line, stripped_line, hyphenated_words, annotations, concat(accented_line, ' ', lead(accented_line) OVER (ORDER BY index ASC) ) AS linebundle
                FROM in0618 WHERE
            EXISTS
                (SELECT 1 FROM in0618_includelist_UNIQUENAME incl WHERE incl.includeindex = in0618.index
             AND in0618.accented_line ~* %s) ) first
        ) second
    WHERE second.linebundle ~ %s  LIMIT 200


can test "ἀνέθηκεν ὑπὲρ" via the following:

Mysia and Troas [Munich] (Olympene),
2684
line 6

  	Region:  Mys.: Olympene
  	City:  Serçeler
  	Additional publication info:  IK 33,38

	   [ἀγ]αθῇ τύχῃ·
	[ ]κ̣α̣ϲ̣τ̣ο̣ϲ̣
	ἀνέθηκεν
	ὑπὲρ τῶν ἰ-
	δίων εὐχή-
	ν.

127.0.0.1 - - [10/Jun/2021 12:32:38] "GET /search/standard/03f2fce2?skg=ἀνέθηκεν&prx=ὑπὲρ HTTP/1.1" 200 -
127.0.0.1 - - [10/Jun/2021 12:32:39] "GET /search/confirm/03f2fce2 HTTP/1.1" 200 -

==

THIS ONE WORKS


hipparchiaDB=# CREATE TEMPORARY TABLE in110f_includelist_UNIQUENAME AS
        SELECT values
            AS includeindex FROM unnest(ARRAY[16197,16198,16199,16200,16201,16202,16203,16204,16205,16206,16207]) values;

hipparchiaDB=# SELECT second.wkuniversalid, second.index, second.level_05_value, second.level_04_value, second.level_03_value, second.level_02_value, second.level_01_value, second.level_00_value, second.marked_up_line, second.accented_line, second.stripped_line, second.hyphenated_words, second.annotations FROM
        ( SELECT * FROM
            ( SELECT wkuniversalid, index, level_05_value, level_04_value, level_03_value, level_02_value, level_01_value, level_00_value, marked_up_line, accented_line, stripped_line, hyphenated_words, annotations, concat(accented_line, ' ', lead(accented_line) OVER (ORDER BY index ASC)
            ) AS linebundle
                FROM in110f WHERE EXISTS
                ( SELECT 1 FROM in110f_includelist_UNIQUENAME incl WHERE incl.includeindex = in110f.index ) ) first
        ) second
    WHERE second.linebundle ~ 'ἀνέθηκεν ὑπὲρ'  LIMIT 200;


VS WHAT YOU GET NOW IN PRE v1.7.6 rewritequerystringforsubqueryphrasesearching():

    SELECT second.wkuniversalid, second.index, second.level_05_value, second.level_04_value, second.level_03_value, second.level_02_value, second.level_01_value, second.level_00_value, second.marked_up_line, second.accented_line, second.stripped_line, second.hyphenated_words, second.annotations FROM
        ( SELECT * FROM
            ( SELECT wkuniversalid, index, level_05_value, level_04_value, level_03_value, level_02_value, level_01_value, level_00_value, marked_up_line, accented_line, stripped_line, hyphenated_words, annotations, concat(accented_line, ' ', lead(accented_line) OVER (ORDER BY index ASC) ) AS linebundle
                FROM in110f WHERE
            EXISTS
                (SELECT 1 FROM in110f_includelist_UNIQUENAME incl WHERE incl.includeindex = in110f.index
             AND in110f.accented_line ~* 'ἀνέθηκεν') ) first
        ) second
    WHERE second.linebundle ~ 'ἀνέθηκεν'  LIMIT 200;

delete "AND in110f.accented_line ~* 'ἀνέθηκεν'"


[L] numba / umap-learn / numpy problems

starting w/ vectors enabled might yield:
    ValueError: numpy.ndarray size changed, may indicate binary incompatibility. Expected 96 from C header, got 88 from PyObject

see:
    https://stackoverflow.com/questions/66060487/valueerror-numpy-ndarray-size-changed-may-indicate-binary-incompatibility-exp

which python + which numba + which numpy is the issue: ick

but the following 'worked':
    pip uninstall numba

then a pipupgrade broke everything...

then reinstalling gensim fixed it...
    # these all seem to work...
    pip install gensim==3.8.3
    pip install gensim==4.0.1
    pip install gensim==4.1.1
    pip install gensim==4.1.2
    pip install gensim==4.2.0
    [need to find the max viable version... gensim-4.2.0 is latest]

=======
you will be warned about this:

    ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
    umap-learn 0.5.3 requires numba>=0.49, which is not installed.
    pynndescent 0.5.6 requires numba>=0.51.2, which is not installed.
