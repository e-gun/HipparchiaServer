cloc --not-match-f='^j' HipparchiaServer/
      89 text files.
      89 unique files.
       9 files ignored.

github.com/AlDanial/cloc v 1.72  T=0.89 s (93.1 files/s, 22648.8 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                          48           2876           3622           7872
XML                              6              0              0           1556
HTML                            21            123             13           1487
JavaScript                       6            193            187           1071
CSS                              1            184            129            732
Markdown                         1             32              0            123
-------------------------------------------------------------------------------
SUM:                            83           3408           3951          12841
-------------------------------------------------------------------------------


[ in server/] grep "^class" */*.py && grep "^def " *.py && grep "^def " */*.py

hipparchiaobjects/dbtextobjects.py:class dbAuthor(object):
hipparchiaobjects/dbtextobjects.py:class dbOpus(object):
hipparchiaobjects/dbtextobjects.py:class dbWorkLine(object):
hipparchiaobjects/helperobjects.py:class SearchResult(object):
hipparchiaobjects/helperobjects.py:class LowandHighInfo(object):
hipparchiaobjects/helperobjects.py:class MPCounter(object):
hipparchiaobjects/helperobjects.py:class ProgressPoll(object):
hipparchiaobjects/helperobjects.py:class QueryCombinator(object):
hipparchiaobjects/helperobjects.py:class SearchObject(object):
hipparchiaobjects/lexicalobjects.py:class dbWordCountObject(object):
hipparchiaobjects/lexicalobjects.py:class dbHeadwordObject(dbWordCountObject):
hipparchiaobjects/lexicalobjects.py:class dbMorphologyObject(object):
hipparchiaobjects/lexicalobjects.py:class MorphPossibilityObject(object):
hipparchiaobjects/lexicalobjects.py:class dbDictionaryEntry(object):
hipparchiaobjects/lexicalobjects.py:class dbGreekWord(dbDictionaryEntry):
hipparchiaobjects/lexicalobjects.py:class dbLatinWord(dbDictionaryEntry):
hipparchiaobjects/lexicalobjects.py:class dbLemmaObject(object):
calculatewordweights.py:def findtemporalweights(language):
calculatewordweights.py:def findccorporaweights():
calculatewordweights.py:def findgeneraweights(language, collapsed=False):
calculatewordweights.py:def findchronologicalweights(era,language):
calculatewordweights.py:def findcorpusweight(corpus, language):
startup.py:def dictitemstartswith(originaldict, element, muststartwith):
startup.py:def findspecificdate(authorandworklist, authorobjectdict, workobjectdict, specificdate):
browsing/browserfunctions.py:def getandformatbrowsercontext(authorobject, workobject, locusindexvalue, linesofcontext, numbersevery, cursor):
browsing/browserfunctions.py:def checkfordocumentmetadata(line, workobject):
browsing/browserfunctions.py:def insertparserids(lineobject, continuationdict):
browsing/browserfunctions.py:def bracketcheck(word):
browsing/browserfunctions.py:def addobservedtags(word, lastword, hyphenated):
browsing/browserfunctions.py:def insertcrossreferencerow(lineobject):
browsing/browserfunctions.py:def insertdatarow(label, css, founddate):
dbsupport/citationfunctions.py:def findvalidlevelvalues(workid, workstructure, partialcitationtuple, cursor):
dbsupport/citationfunctions.py:def locusintocitation(workobject, lineobject):
dbsupport/citationfunctions.py:def prolixlocus(workobject, citationtuple):
dbsupport/citationfunctions.py:def finddblinefromlocus(workid, citationtuple, cursor):
dbsupport/citationfunctions.py:def finddblinefromincompletelocus(workobject, citationlist, cursor, trialnumber=0):
dbsupport/citationfunctions.py:def perseuslookupleveltrimmer(workobject, citationlist, cursor, trialnumber):
dbsupport/citationfunctions.py:def perseuslookupchangecase(citationlist):
dbsupport/citationfunctions.py:def perseusdelabeler(citationlist, workobject):
dbsupport/citationfunctions.py:def perseuscitationsintohipparchiacitations(citationlist):
dbsupport/dbfunctions.py:def setthreadcount():
dbsupport/dbfunctions.py:def setconnection(autocommit='n'):
dbsupport/dbfunctions.py:def tablenamer(authorobject, thework):
dbsupport/dbfunctions.py:def loadallauthorsasobjects():
dbsupport/dbfunctions.py:def loadallworksasobjects():
dbsupport/dbfunctions.py:def dbloadasingleworkobject(workuniversalid):
dbsupport/dbfunctions.py:def loadallworksintoallauthors(authorsdict, worksdict):
dbsupport/dbfunctions.py:def dblineintolineobject(dbline):
dbsupport/dbfunctions.py:def findtoplevelofwork(workuid, cursor):
dbsupport/dbfunctions.py:def findselectionboundaries(workobject, selection, cursor):
dbsupport/dbfunctions.py:def simplecontextgrabber(authortable, focusline, linesofcontext, cursor):
dbsupport/dbfunctions.py:def grabonelinefromwork(workdbname, lineindex, cursor):
dbsupport/dbfunctions.py:def returnfirstlinenumber(workid, cursor):
dbsupport/dbfunctions.py:def perseusidmismatch(badworkdbnumber,cursor):
dbsupport/dbfunctions.py:def returnfirstwork(authorid, cursor):
dbsupport/dbfunctions.py:def makeablankline(work, fakelinenumber):
dbsupport/dbfunctions.py:def makeanemptyauthor(universalid):
dbsupport/dbfunctions.py:def makeanemptywork(universalid):
dbsupport/dbfunctions.py:def versionchecking(activedbs, expectedsqltemplateversion):
formatting/betacodetounicode.py:def replacegreekbetacode(texttoclean):
formatting/betacodetounicode.py:def capitalletters(betacode):
formatting/betacodetounicode.py:def capitalsmoothgraveadscript(match, g=1):
formatting/betacodetounicode.py:def capitalroughgraveadscript(match, g=1):
formatting/betacodetounicode.py:def capitalsmoothacuteadscript(match, g=1):
formatting/betacodetounicode.py:def capitalroughacuteadscript(match, g=1):
formatting/betacodetounicode.py:def capitalsmoothcircumflexadscript(match, g=1):
formatting/betacodetounicode.py:def capitalroughcircumflexadscript(match, g=1):
formatting/betacodetounicode.py:def capitalsmoothgrave(match, g=1):
formatting/betacodetounicode.py:def capitalroughgrave(match, g=1):
formatting/betacodetounicode.py:def capitalsmoothacute(match, g=1):
formatting/betacodetounicode.py:def capitalroughacute(match, g=1):
formatting/betacodetounicode.py:def capitalsmoothcircumflex(match, g=1):
formatting/betacodetounicode.py:def capitalroughcircumflex(match, g=1):
formatting/betacodetounicode.py:def capitalsmooth(match, g=1):
formatting/betacodetounicode.py:def capitalrough(match, g=1):
formatting/betacodetounicode.py:def capitalgrave(match, g=1):
formatting/betacodetounicode.py:def capitalacute(match, g=1):
formatting/betacodetounicode.py:def capitaladscript(match, g=1):
formatting/betacodetounicode.py:def capitals(match, g=1):
formatting/betacodetounicode.py:def lowercaseletters(betacode):
formatting/betacodetounicode.py:def lowercasesmoothgravesubscript(match, g=1):
formatting/betacodetounicode.py:def lowercaseroughgravesubscript(match, g=1):
formatting/betacodetounicode.py:def lowercasesmoothacutesubscript(match, g=1):
formatting/betacodetounicode.py:def lowercaseroughacutesubscript(match, g=1):
formatting/betacodetounicode.py:def lowercasesmoothcircumflexsubscript(match, g=1):
formatting/betacodetounicode.py:def lowercaseroughcircumflexsubscript(match, g=1):
formatting/betacodetounicode.py:def lowercasesmoothgrave(match, g=1):
formatting/betacodetounicode.py:def lowercaseroughgrave(match, g=1):
formatting/betacodetounicode.py:def lowercasesmoothacute(match, g=1):
formatting/betacodetounicode.py:def lowercaseroughacute(match, g=1):
formatting/betacodetounicode.py:def lowercasesmoothcircumflex(match, g=1):
formatting/betacodetounicode.py:def lowercaseroughcircumflex(match, g=1):
formatting/betacodetounicode.py:def lowercasegravesub(match, g=1):
formatting/betacodetounicode.py:def lowercaseacutedsub(match, g=1):
formatting/betacodetounicode.py:def lowercasesircumflexsub(match, g=1):
formatting/betacodetounicode.py:def lowercasesmoothsub(match, g=1):
formatting/betacodetounicode.py:def lowercaseroughsub(match, g=1):
formatting/betacodetounicode.py:def lowercasegravediaresis(match, g=1):
formatting/betacodetounicode.py:def lowercaseacutediaresis(match, g=1):
formatting/betacodetounicode.py:def lowercasesircumflexdiaresis(match, g=1):
formatting/betacodetounicode.py:def lowercasesmooth(match, g=1):
formatting/betacodetounicode.py:def lowercaserough(match, g=1):
formatting/betacodetounicode.py:def lowercasegrave(match, g=1):
formatting/betacodetounicode.py:def lowercaseacute(match, g=1):
formatting/betacodetounicode.py:def lowercascircumflex(match, g=1):
formatting/betacodetounicode.py:def lowercasediaresis(match, g=1):
formatting/betacodetounicode.py:def lowercasesubscript(match, g=1):
formatting/betacodetounicode.py:def lowercases(match, g=0):
formatting/bibliographicformatting.py:def bcedating(s=session):
formatting/bibliographicformatting.py:def formatauthinfo(authorobject):
formatting/bibliographicformatting.py:def woformatworkinfo(workobject):
formatting/bibliographicformatting.py:def formatname(workobject, authorobject):
formatting/bibliographicformatting.py:def getpublicationinfo(workobject, cursor):
formatting/bibliographicformatting.py:def formatpublicationinfo(pubinfo):
formatting/bibliographicformatting.py:def avoidlonglines(string, maxlen, splitval, stringlist=[]):
formatting/bibliographicformatting.py:def formatauthorandworkinfo(authorname, workobject):
formatting/lexicaformatting.py:def grabsenses(fullentry):
formatting/lexicaformatting.py:def entrysummary(fullentry, lang, translationlabel, lemmaobject):
formatting/lexicaformatting.py:def grabheadmaterial(fullentry):
formatting/lexicaformatting.py:def deabbreviateauthors(authorabbr, lang):
formatting/lexicaformatting.py:def formatdictionarysummary(summarydict):
formatting/lexicaformatting.py:def formateconsolidatedgrammarentry(consolidatedentry):
formatting/lexicaformatting.py:def formatgloss(entrybody):
formatting/lexicaformatting.py:def formatmicroentry(entrybody):
formatting/lexicaformatting.py:def insertbrowserlookups(htmlentry):
formatting/lexicaformatting.py:def insertbrowserjs(htmlentry):
formatting/lexicaformatting.py:def dbquickfixes(listofnames):
formatting/lexicaformatting.py:def deabrevviategreekauthors():
formatting/lexicaformatting.py:def deabrevviatelatinauthors():
formatting/searchformatting.py:def buildresultobjects(hitdict, authordict, workdict, searchobject, activepoll):
formatting/searchformatting.py:def bulkenvironsfetcher(table, searchresultlist, context):
formatting/searchformatting.py:def flagsearchterms(searchresultobject, skg, prx, searchobject):
formatting/searchformatting.py:def highlightsearchterm(lineobject, regexequivalent, spanname):
formatting/searchformatting.py:def compilesearchtermequivalent(searchterm):
formatting/searchformatting.py:def htmlifysearchfinds(listofsearchresultobjects, searchobject):
formatting/searchformatting.py:def brackethtmlifysearchfinds(listoflineobjects, searchobject, linehtmltemplate):
formatting/searchformatting.py:def nocontexthtmlifysearchfinds(listofsearchresultobjects):
formatting/searchformatting.py:def jstoinjectintobrowser(listofsearchresultobjects):
formatting/searchformatting.py:def unbalancedspancleaner(html):
formatting/wordformatting.py:def removegravity(accentedword):
formatting/wordformatting.py:def forceterminalacute(matchgroup):
formatting/wordformatting.py:def stripaccents(texttostrip, transtable=None):
formatting/wordformatting.py:def buildhipparchiatranstable():
formatting/wordformatting.py:def gkattemptelision(hypenatedgreekheadword):
formatting/wordformatting.py:def latattemptelision(hypenatedlatinheadword):
formatting/wordformatting.py:def tidyupterm(word, punct=None):
formatting/wordformatting.py:def cleanaccentsandvj(texttostrip):
lexica/lexicalookups.py:def lookformorphologymatches(word, cursor, trialnumber=0):
lexica/lexicalookups.py:def lexicalmatchesintohtml(observedform, morphologyobject, cursor):
lexica/lexicalookups.py:def browserdictionarylookup(count, seekingentry, cursor):
lexica/lexicalookups.py:def searchdictionary(cursor, dictionary, usecolumn, seeking, syntax, trialnumber=0):
lexica/lexicalookups.py:def convertdictionaryfindintoobject(foundline, dictionary):
lexica/lexicalookups.py:def bulkddictsearch(cursor, dictionary, usecolumn, seeking):
lexica/lexicalookups.py:def findtotalcounts(word, cursor):
lexica/lexicalookups.py:def findcountsviawordcountstable(wordtocheck):
lexica/lexicalookups.py:def getobservedwordprevalencedata(dictionaryword):
lexica/lexicalookups.py:def formatprevalencedata(wordcountobject):
lexica/lexicalookups.py:def grablemmataobjectfor(entryname, db, cursor):
lexica/lexicalookups.py:def findtermamongsenses(match, seeking, usedict, translationlabel, cur):
listsandsession/listmanagement.py:def compilesearchlist(listmapper, s=session):
listsandsession/listmanagement.py:def sortsearchlist(searchlist, authorsdict):
listsandsession/listmanagement.py:def sortresultslist(hits, authorsdict, worksdict):
listsandsession/listmanagement.py:def calculatewholeauthorsearches(searchlist, authordict):
listsandsession/listmanagement.py:def flagexclusions(searchlist, s=session):
listsandsession/listmanagement.py:def prunebydate(searchlist, authorobjectdict, workobjectdict):
listsandsession/listmanagement.py:def removespuria(searchlist, worksdict):
listsandsession/listmanagement.py:def buildhintlist(seeking, listofposiblities):
listsandsession/listmanagement.py:def tidyuplist(untidylist):
listsandsession/listmanagement.py:def dropdupes(checklist, matchlist):
listsandsession/listmanagement.py:def polytonicsort(unsortedwords):
listsandsession/listmanagement.py:def foundindict(searchdict, element, mustbein):
listsandsession/sessiondicts.py:def buildaugenresdict(authordict):
listsandsession/sessiondicts.py:def buildworkgenresdict(workdict):
listsandsession/sessiondicts.py:def buildauthorlocationdict(authordict):
listsandsession/sessiondicts.py:def buildworkprovenancedict(workdict):
listsandsession/sessionfunctions.py:def sessionvariables():
listsandsession/sessionfunctions.py:def modifysessionvar(param,val):
listsandsession/sessionfunctions.py:def modifysessionselections(cookiedict, authorgenreslist, workgenreslist, authorlocationlist, workprovenancelist):
listsandsession/sessionfunctions.py:def parsejscookie(cookiestring):
listsandsession/sessionfunctions.py:def sessionselectionsashtml(authordict, workdict):
listsandsession/sessionfunctions.py:def sessionselectionsjs(labeltupleslist):
listsandsession/sessionfunctions.py:def sessiontimeexclusionsinfo():
listsandsession/sessionfunctions.py:def sessionselectionsinfo(authordict, workdict):
listsandsession/sessionfunctions.py:def selectionlinehtmlandjs(v, selectionorexclusion, session):
listsandsession/sessionfunctions.py:def rationalizeselections(newselectionuid, selectorexclude):
listsandsession/sessionfunctions.py:def corpusselectionsasavalue():
listsandsession/sessionfunctions.py:def corpusselectionsaspseudobinarystring():
listsandsession/sessionfunctions.py:def justlatin():
listsandsession/sessionfunctions.py:def justtlg():
listsandsession/sessionfunctions.py:def justinscriptions():
listsandsession/sessionfunctions.py:def justpapyri():
listsandsession/sessionfunctions.py:def justlit():
listsandsession/sessionfunctions.py:def justdoc():
listsandsession/sessionfunctions.py:def reducetosessionselections(listmapper, criterion):
listsandsession/sessionfunctions.py:def returnactivedbs():
listsandsession/sessionfunctions.py:def findactivebrackethighlighting(s=session):
listsandsession/sessionfunctions.py:def selectionisactive(selected):
listsandsession/sessionfunctions.py:def returnactivelist(selectiondict):
listsandsession/validateconfig.py:def loadconfig(filepath):
listsandsession/validateconfig.py:def parseconfig(configlist):
listsandsession/validateconfig.py:def compareconfigs(template, model):
listsandsession/whereclauses.py:def configurewhereclausedata(searchlist, workdict, searchobject):
listsandsession/whereclauses.py:def wholeworkbetweenclausecontents(listofworkobjects):
listsandsession/whereclauses.py:def wholeworktemptablecontents(authorid, setoflinenumbers):
listsandsession/whereclauses.py:def partialworkbetweenclausecontents(workobject, searchobject):
routes/browseroute.py:def grabtextforbrowsing(locus):
routes/frontpage.py:def frontpage():
routes/frontpage.py:def sendfavicon():
routes/frontpage.py:def appletouchticon():
routes/frontpage.py:def loadhelpdata():
routes/getterroutes.py:def getsessionvariables():
routes/getterroutes.py:def cookieintosession(cookienum):
routes/getterroutes.py:def findtheworksof(authoruid):
routes/getterroutes.py:def workstructure(locus):
routes/getterroutes.py:def getauthinfo(authorid):
routes/getterroutes.py:def getsearchlistcontents():
routes/getterroutes.py:def getgenrelistcontents():
routes/hintroutes.py:def offerauthorhints():
routes/hintroutes.py:def augenrelist():
routes/hintroutes.py:def wkgenrelist():
routes/hintroutes.py:def offeraulocationhints():
routes/hintroutes.py:def offerprovenancehints():
routes/inforoutes.py:def databasecontents(dictionarytodisplay):
routes/lexicalroutes.py:def findbyform(observedword):
routes/lexicalroutes.py:def dictsearch(searchterm):
routes/lexicalroutes.py:def reverselexiconsearch(searchterm):
routes/searchroute.py:def executesearch(timestamp):
routes/selectionroutes.py:def selectionmade():
routes/selectionroutes.py:def setsessionvariable():
routes/selectionroutes.py:def clearselections():
routes/selectionroutes.py:def getcurrentselections():
routes/selectionroutes.py:def clearsession():
routes/textandindexroutes.py:def completeindex():
routes/textandindexroutes.py:def textmaker():
routes/websocketroutes.py:def startwspolling(theport=hipparchia.config['PROGRESSPOLLDEFAULTPORT']):
routes/websocketroutes.py:def checkforactivesearch(ts):
searching/phrasesearching.py:def phrasesearch(maxhits, wkid, activepoll, searchobject, cursor):
searching/phrasesearching.py:def subqueryphrasesearch(foundlineobjects, searchphrase, tablestosearch, count, commitcount, activepoll, searchobject):
searching/proximitysearching.py:def withinxlines(workdbname, searchobject):
searching/proximitysearching.py:def withinxwords(workdbname, searchobject):
searching/searchdispatching.py:def searchdispatcher(searchobject, activepoll):
searching/searchdispatching.py:def workonsimplesearch(count, foundlineobjects, searchlist, commitcount, activepoll, searchobject):
searching/searchdispatching.py:def workonphrasesearch(foundlineobjects, searchinginside, commitcount, activepoll, searchobject):
searching/searchdispatching.py:def workonproximitysearch(count, foundlineobjects, searchinginside, activepoll, searchobject):
searching/searchfunctions.py:def cleaninitialquery(seeking):
searching/searchfunctions.py:def massagesearchtermsforwhitespace(query):
searching/searchfunctions.py:def atsignwhereclauses(uidwithatsign, operand, authors):
searching/searchfunctions.py:def substringsearch(seeking, authortable, searchobject, cursor, templimit=None):
searching/searchfunctions.py:def buildbetweenwhereextension(authortable, searchobject):
searching/searchfunctions.py:def lookoutsideoftheline(linenumber, numberofextrawords, workid, searchobject, cursor):
searching/searchfunctions.py:def findleastcommonterm(searchphrase, accentsneeded):
searching/searchfunctions.py:def findleastcommontermcount(searchphrase, accentsneeded):
searching/searchfunctions.py:def dblooknear(index, distanceinlines, secondterm, workid, usecolumn, cursor):
textsandindices/indexmaker.py:def compilewordlists(worksandboundaries, cursor):
textsandindices/indexmaker.py:def buildindextowork(cdict, activepoll, headwords, cursor):
textsandindices/indexmaker.py:def mpmorphology(terms, morphobjects, commitcount):
textsandindices/indexmaker.py:def htmlifysimpleindex(completeindexdict, onework):
textsandindices/indexmaker.py:def linesintoindex(lineobjects, activepoll):
textsandindices/indexmaker.py:def pooledindexmaker(lineobjects):
textsandindices/textandindiceshelperfunctions.py:def tcparserequest(request, authordict, workdict):
textsandindices/textandindiceshelperfunctions.py:def textsegmentfindstartandstop(authorobject, workobject, passageaslist, cursor):
textsandindices/textandindiceshelperfunctions.py:def wordindextohtmltable(indexingoutput, useheadwords):
textsandindices/textandindiceshelperfunctions.py:def dictmerger(masterdict, targetdict):
textsandindices/textandindiceshelperfunctions.py:def supplementalindexjs():
textsandindices/textandindiceshelperfunctions.py:def setcontinuationvalue(thisline, previousline, previouseditorialcontinuationvalue, type):
textsandindices/textbuilder.py:def buildtext(work, firstline, lastline, linesevery, cursor):